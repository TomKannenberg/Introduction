//Tom Kannenberg 2023, C++17

#pragma once
#include "../TKUtility/TKUtility.h"
#include <windows.h>
#include <shellapi.h>
#include <WinInet.h>
#include <codecvt>

#pragma comment(lib, "wininet.lib")



namespace TKCursor {
    using std::string, std::cout, std::cin, std::to_string;

    class Cursor;

    class CursorBlock {
        
        private:
        
            unsigned char start = 0;        // X Position of the Text
            unsigned char row = 0;          // Y Position of the Text
            string text;                    // Text value
            Cursor* action;                 // Cursor to switch to when hit
            Cursor* parent;                 // Parent to switch to when escape

            bool exists;                    // To check if it isn't an empty generated by array
            bool star;                      // Check if it has a active Star
        
        public:
        
            CursorBlock();
            CursorBlock(unsigned char start, unsigned char row, string text);
            CursorBlock(unsigned char start, unsigned char row, string text, Cursor* action);
        
            void update(bool selected);
            void removeStar();
            void hide();
            const string& getText() const;
            Cursor* &getAction();
            Cursor* &getParent();

            bool doesExist();

            void setParent(Cursor* &parent);
    };

    class Cursor {
        
        private:
        
            unsigned char xpos = 0;         // Current X position of the Cursor
            unsigned char ypos = 0;         // Current Y position of the Cursor
            int size[2];                    // Size of each dimension of the Cursor
            bool cursorBlink;               // Indicates if cursor blinking is enabled to improve readability for longer text
            bool update = false;            // One of the few mechanics to Sync the blinker task at TKMenu.cpp:75
            bool active = false;            // If not active we don't hide CursorBlocks
            bool check = false;             // If check is true, it enables the * feature
            bool uniquecheck = true;        // Check for this Cursor
            int checks = 0;                 // Number of Checks under this Cursor's CursorBlock
        
        public:
        
            Cursor* parent;                 // Parent of this Cursor to escape to
            CursorBlock* currentBlock;      // Current selected CursorBlock
            CursorBlock* associatedBlock;   // CursorBlock that has this Cursor as Action
            CursorBlock** cursorBlocks;     // All the CursorBlocks / Highlighted text that this Cursor moves over
        
            Cursor(const unsigned char (&size)[2], const bool cursorBlink = true);
            ~Cursor();

            void setParent(Cursor* parent);
            void setAssociate(CursorBlock* block);
        
            void addBlock(const int &column, const int &row, const string &text, Cursor* action = nullptr);
        
            void move(const bool &axis, const int &direction);
            void CheckBounds(unsigned char &x, unsigned char &y, const int* size);
        
            unsigned char getPos(const bool &axis);
            unsigned char getSize(const bool& axis);
            CursorBlock* getCurrent();
            CursorBlock** getCursorBlocks();
            const bool isBlinking() const;
            const bool hasUpdate() const;
            const bool isActive() const;

            void unsetUpdate();
            void setCheck(const unsigned char &checks);
            void removeCheck(bool external = false);
        
            bool hitAction();
            void OpenLinkAndWait(const std::wstring& link, const std::wstring& imageName);
            void switchTo(Cursor* other);
            void hideAll();
            void showAll();
            bool escape();
            const bool& getCheck();
    };

    class CursorInfo {
        
        private:
        
            unsigned char size[2];          // Size of each dimension
            string* values;                 // Text of all the CursorBlocks (highlightable text)
            bool* actions;                  // Action map for each CursorBlock
            bool cursorBlink = true;        // Indicates if cursor blinking is enabled to improve readability for longer text
            string* actionNames;            // Stores action names when initializing the menu using unordered_map & string
            bool check;                     // If check is true, it enables the * feature
            unsigned char checks;           // If every sub * is interacted with, it will remove the start, signifying that the chapter is done
        
        public:
        
            CursorInfo(const std::initializer_list<char> &size, const std::initializer_list<string> &values, const std::initializer_list<bool> &actions = {},
                       const std::initializer_list<string> &actionNames = {}, const bool &actionCheck = false, const int &actionChecks = 0);

            CursorInfo(const std::initializer_list<char>& size, const std::initializer_list<string>& values, const bool& cursorBlink, const bool& actionCheck = false,
                       const int& actionChecks = 0, const std::initializer_list<bool>& actions = {}, const std::initializer_list<string>& actionNames = {});

            void initialize(const std::initializer_list<char>& size, const std::initializer_list<string>& values, const std::initializer_list<bool>& actions,
                const std::initializer_list<string>& actionNames, const bool& actionCheck, const int& actionChecks, const bool& cursorBlink);

            ~CursorInfo();

            const unsigned char (&getSize() const)[2];
            const string* getValues() const;
            const bool* getActions() const;
            const string* getActionNames() const;
            const bool getCursorBlink() const;
            const bool getCheck() const;
            const unsigned char getChecks() const;
        
    };
}